# "Import" all of our global utils that we have in separate files
for file in /Users/brett/src/personal/dotfiles/bin/global-utils/*.sh; do
  chmod +x $file
  source $file
done

#####################################################################
# Dev Utils
#####################################################################

#################################################
# Returns 0 if project is a yarn project, 1 if not. If it's not and it's a node project, this probably means it's npm we're working with
#
# Arguments: none
#################################################
is_yarn_project() {
  if [[ -e yarn.lock ]]; then
    return 0
  else
    return 1
  fi
}

fm() {
  echo "💅 Formatting files with Prettier..."
  # This `is_yarn_project` isn't working well inside in concurrently, just ignoring and using yarn by default for now
  # if is_yarn_project; then
  yarn prettier --write --loglevel=error .
  # else
  # npx prettier --write --loglevel=error .
  # fi
  echo "✅ Done formatting"
}
# "format commit": format the files, and commit the result
fmc() {
  fm

  if git_has_changes; then
    gcim 'cleanup'
  fi
}
lint() {
  echo "🔎 Linting files with ESLint..."
  yarn eslint --max-warnings=0 --fix .
  echo "✅ Done linting"
}
tc() {
  echo "🧐 Type-checking files with TypeScript..."
  yarn tsc $@ --noEmit
  echo "✅ Done type-checking"
}
jest() {
  echo "🧪 Testing files changed on branch..."
  # Maaaaaan, Jest don't know SHIT about how many workers to use
  # https://dev.to/vantanev/make-your-jest-tests-up-to-20-faster-by-changing-a-single-setting-i36
  yarn jest --changedSince=$(git_dev_branch) --coverage=false --maxWorkers=50% $@
  echo "✅ Done testing"
}
jestw() {
  echo "🧪👀 Testing files on watch..."
  yarn jest --watch --coverage=false --maxWorkers=25% $@
  echo "✅ Done testing"
}
jestbw() {
  echo "🧪👀 Testing files changed on branch on watch..."
  yarn jest --changedSince=$(git_dev_branch) --watch --coverage=false --maxWorkers=25% $@
  echo "✅ Done testing"
}
jesta() {
  echo "🧪 Testing all files..."
  yarn jest --coverage=false --maxWorkers=50% $@
  echo "✅ Done testing"
}
vj() {
  if is_yarn_project; then
    yarn
  else
    npm i
  fi
  jest
}
# "validate static"
vs() { (
  # Exit and fail the function if any command in it fails. In a function, you have to add the parens to create a "subshell" in order for this to work. Without them, zsh itself crashes
  # https://stackoverflow.com/questions/40429865/how-to-exit-bash-function-if-error
  set -e

  local index_dirty=0
  if git_has_changes; then
    echo "Uncommitted changes found; will not commit cleanup changes."
    index_dirty=1
  fi

  if is_yarn_project; then
    yarn
  else
    npm i
  fi

  # NOTE: Since concurrently doesn't have access to our functions/aliases above, we have to duplicate their commands here. So those and these should remain in sync
  # Using `npx` right now to reduce noise of saying `yarn run v1.x.x` right now, but could switch to yarn. Or could use bin below (but at that point, have to be in the project root for this to work. Or write some intelligent function that traverses upwards to find the project root, then use the `/node_modules/.bin` from there)
  # local bin="$(pwd)/node_modules/.bin"
  concurrently \
    -n typescript,eslint,prettier -c "#4077ba,#7b7ee3,#efbd52" \
    "npx tsc --noEmit" \
    "npx eslint --max-warnings=0  --fix ." \
    "npx prettier -write --loglevel=error ."

  if git_has_changes; then
    if [[ index_dirty -eq 0 ]]; then
      gcim "cleanup"
    fi
  fi
); }
# "validate all" (static plus Jest tests)
v() { (
  # Exit and fail the function if any command in it fails. In a function, you have to add the parens to create a "subshell" in order for this to work. Without them, zsh itself crashes
  # https://stackoverflow.com/questions/40429865/how-to-exit-bash-function-if-error
  set -e

  local index_dirty=0
  if git_has_changes; then
    echo "Uncommitted changes found; will not commit cleanup changes."
    index_dirty=1
  fi

  if is_yarn_project; then
    yarn
  else
    npm i
  fi

  # NOTE: Since concurrently doesn't have access to our functions/aliases above, we have to duplicate their commands here. So those and these should remain in sync
  # Using `npx` right now to reduce noise of saying `yarn run v1.x.x` right now, but could switch to yarn. Or could use bin below (but at that point, have to be in the project root for this to work. Or write some intelligent function that traverses upwards to find the project root, then use the `/node_modules/.bin` from there)
  # local bin="$(pwd)/node_modules/.bin"
  # Normally do this with `maxWorkers=50%`, but since we're doing this other stuff in parallel too, we have even less resources to work with, so 50% ends up being too much again
  concurrently \
    -n typescript,jest,eslint,prettier -c "#4077ba,#8f455b,#7b7ee3,#efbd52" \
    "npx tsc --noEmit" \
    "npx jest --changedSince=$(git_dev_branch) --coverage=false --maxWorkers=25%" \
    "npx eslint --max-warnings=0 --fix ." \
    "npx prettier -write --loglevel=error ."

  if git_has_changes; then
    if [[ index_dirty -eq 0 ]]; then
      gcim "cleanup"
    fi
  fi
); }

#####################################################################
# Bat and Delta
#####################################################################

# Set up the themes for Bat and Delta, based on if macOS dark mode is on or not
# Can also pass in a theme instead of inferring from macOS dark mode
setup_themes() {
  local theme=$1

  case "$theme" in
  "dark")
    local bat_theme="OneHalfDark"
    local delta_theme="Monokai Extended"
    ;;
  "light")
    local bat_theme="GitHub"
    local delta_theme="GitHub"
    ;;
  *)
    # Decide the theme based on macOS dark mode
    local bat_theme="$(defaults read -globalDomain AppleInterfaceStyle &>/dev/null && echo OneHalfDark || echo GitHub)"
    local delta_theme="$(defaults read -globalDomain AppleInterfaceStyle &>/dev/null && echo Monokai Extended || echo GitHub)"
    ;;
  esac

  alias bat="bat --theme=$bat_theme"
  alias cat="bat"

  alias delta="delta --syntax-theme=$delta_theme"

  # To make sure git uses Delta, _with_ the theme we've decided on :)
  export GIT_PAGER="delta --syntax-theme=$delta_theme"
  # Oh, and since you can't use environment variables in your ~/gitconfig, we're going to manually set the "system" gitconfig here based on $delta_theme, to make sure intractive git commands (e.g. `git add -p`) are also pretty 💅
  # NOTE: Since moving to Apple Silicon mac, using --system here (like I want to do, since it doesn't touch our global and git-tracked gitconfig) requires sudo access. Which we can't do, because then we need a password everytime we start up a new shell
  git config --global interactive.diffFilter "delta --color-only --syntax-theme=$delta_theme"

  # Use `bat` for syntax highlighting in man pages
  export MANPAGER="sh -c 'col -bx | bat -l man -p --theme=$bat_theme'"
}
setup_themes

# Helper utils to changes themes
dark() {
  setup_themes dark
}
light() {
  setup_themes light
}
# Alias for "Theme"
t() {
  setup_themes
}

#####################################################################
# npm
#####################################################################

alias ni="npm install"
alias nid="npm install -D"
alias nip="npm install -P"
alias ns="npm start"

#####################################################################
# yarn
#####################################################################

alias ys="yarn start"
alias yr="yarn run"

#####################################################################
# bun
#####################################################################

alias bin="bun install"

#####################################################################
# Python
#####################################################################

alias py="python3"

#####################################################################
# Homebrew
#####################################################################

alias bi="brew install"
alias bb="brew bundle"
alias bupd="brew update"
alias bupg="brew upgrade"
alias bu="brew uninstall"

#####################################################################
# builtins
#####################################################################

alias l="ls -lh --group-directories-first"

# List directories
alias lsd="ls -d */"

# Change ping to stop after 5 pings
alias ping="ping -c 5"

alias wh=which

#####################################################################
# Miscellaneous
#####################################################################

alias b="butterfish"

# Open fzf files with vim by default
alias goto="vim -o \`fzf\`"
alias ls="exa"

# Log ip to console
alias myip="curl http://ipecho.net/plain; echo"

# I do these all the time when I'm mucking around with zsh/my .zshrc
alias z="exec zsh"
alias zo="source ~/zshrc"

alias alg="alias | grep"

# "bundle id": Given the path to an app, gives the app's bundle id
# Source: https://superuser.com/questions/346369/getting-the-bundle-identifier-of-an-os-x-application-in-a-shell-script
alias bid="mdls -name kMDItemCFBundleIdentifier -r"

# Clears the screen and runs the succeeding command(s)
c() {
  clear
  eval $@
}

# Video/ffmpeg shtuff
## The two gif ones make a way bigger file than normal. The problem seems to be with our gifsicle usage, as the `compress_vid` util successfully makes a very small file
demo_gif() {
  local input_vid_num="$1"
  local output_file_name="${2:-"demo-$1"}.gif"
  ffmpeg -i "/Users/brett/Screenshots/📹 SS ${input_vid_num}.mov" -vf "fps=10,scale=600:-1:flags=lanczos,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse" "/Users/brett/Screenshots/$output_file_name" && gifsicle -O3 "/Users/brett/Screenshots/$output_file_name" -o "/Users/brett/Screenshots/$output_file_name"
}
gif() {
  local input_file="$1"
  local output_file_name="${2}.gif"
  ffmpeg -i $input_file -vf "fps=10,scale=300:-1:flags=lanczos,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse" "/Users/brett/Downloads/$output_file_name" && gifsicle -O3 "/Users/brett/Downloads/$output_file_name" -o "/Users/brett/Downloads/$output_file_name"
}
compress_vid() {
  local input_file="$1"
  local output_file_name="${2}.mp4"
  ffmpeg -i $input_file -vf "fps=10,scale=600:-1:flags=lanczos,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse" "/Users/brett/Downloads/$output_file_name"
}

# Find out which processing are using ports
# Source: https://stackoverflow.com/a/30029855/20292417
listening() {
  if [ $# -eq 0 ]; then
    sudo lsof -iTCP -sTCP:LISTEN -n -P
  elif [ $# -eq 1 ]; then
    sudo lsof -iTCP -sTCP:LISTEN -n -P | grep -i --color $1
  else
    echo "Usage: listening [pattern]"
  fi
}

# Serves a folder over port 8080
serve() {
  local port="${1:-8000}"
  python3 -m http.server $port
}
