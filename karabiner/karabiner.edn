{
  :profiles {
    :Goku {
      :default true
      :sim 40
      :delay 500
      :alone 250
      :held 250
    }
  }
  :simlayer-threshold 210

  :tos {
    :same_wind_app      {:key :grave_accent_and_tilde :modi [:left_command] :lazy true}
    :prev_app           {:key :tab :modi [:left_command] :lazy true}
    :left_paren         {:key :9 :modi [:left_shift] :lazy true}
    :right_paren        {:key :0 :modi [:left_shift] :lazy true}
    :left_control_lazy  {:key :left_control :lazy true}
    :right_control_lazy  {:key :right_control :lazy true}
    :left_cmd_lazy      {:key :left_command :lazy true}
    :second_brightness_decrement {:key :!Tdisplay_brightness_decrement }
    :second_brightness_increment {:key :!Tdisplay_brightness_increment }
  }

  :modifiers {
    :ro :right_option
  }

  :templates {
    :launch      "osascript -e 'tell application \"Alfred 4\" to run trigger \"launch%s\" in workflow \"yqrashawn.workflow.launcher\" with argument \"\"'"
    :alfred         "open /Applications/Alfred\\ 4.app && osascript -e 'tell application \"Alfred 4\" to run trigger \"%s\" in workflow \"%s\" with argument \"%s\"'"
    :open        "open %s"
    :opena       "open -a \"%s\" %s"
    ;; "Open website"
    ;;; Techinically, BSD `open` can open a URL as the second arg, with the default browser. But, it has a funny behavior for certain URLs (hard to pinpoint what they have in common) -- it briefly opens `Finder`, _then_ the default browser. This can be annoying, as now Cmd-Tabbing quickly brings you back to Finder, instead of the last app you were actually interacting with
    :openw       "open -a \"Google Chrome\" \"https://%s\""

    :quit        "killall \"%s\""
    :show        "osascript -e 'set appName to \"%s\"\nset startIt to false\ntell application \"System Events\"\n  if not (exists process appName) then\n    set startIt to true\n  else\n    set frontmost of process appName to true\n  end if\nend tell\nif startIt then\n  tell application appName to activate\nend if'\n"
    :toggle      "osascript -e 'set appName to \"%s\"\nset startIt to false\ntell application \"System Events\"\n  if not (exists process appName) then\n    set startIt to true\n  else if frontmost of process appName then\n    set visible of process appName to false\n  else\n    set frontmost of process appName to true\n  end if\nend tell\nif startIt then\n  tell application appName to activate\nend if'"
    :type        "osascript -e 'tell application \"System Events\" to keystroke \"%s\" as text'"
    :unicode      "osascript -e 'tell application \"System Events\" to keystroke (\"%s\" as Unicode text)'"
    :wait        "osascript -e 'delay %s'"
    ; Doesn't work :(
    ; :emoji       "osascipt -e 'set the clipboard to \"%s\" \n tell application \"System Events\" to keystroke \"v\" using command down'"
  }

  ;; Layers: Pro is that you can hold down for a while without . Con is that if you type another character quickly, it'll trigger the layer rule instead of just the first key and second key in succession. Another con is that you can't use that key in other layers (only tested for semicolon-mode, which might be an edge case since we're doing that manually)
  ;; Simlayers: Pro is that you never have to worry about typing too quickly and accidentally triggering a layer's rule, when you're just trying to type. Con is that it slows down the character getting registered (I think by the `:simlayer-threshold` below)

  :layers {
    :comma-mode { :key :comma }
  }
  :simlayers {
    :q-mode { :key :q }
    :x-mode { :key :x }
    :z-mode { :key :z }
    ;; Could move these to layers, if desirable. Won't be able to repeat the characters when holding the key anymore. Make sure to follow the process at the bottom of comma-mode
    :slash-mode { :key :slash }
    ;; Was used for media at one point, no longer needed
    ;; :open_bracket-mode { :key :open_bracket }
    :tab-mode { :key :tab }
    :period-mode { :key :period }
  }

  :main [
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ; Manual layer triggers
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    {
      :des "simlayer: z-x-mode"
      :rules [
        [[:z :x] ["z-x-mode" 1] nil { :afterup ["z-x-mode" 0]}]
      ]
    }

    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ; General/simple
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    {
      :des "swap : and ;"
      :rules [
        [
          :semicolon
          ["semicolon-mode" 1] nil
          { :afterup ["semicolon-mode" 0] :alone :!Ssemicolon}
        ]
        [:!Ssemicolon :semicolon]
      ]
    }
    {
      :des "left cmd -> cmd+tab"
      :rules [[:left_command :left_command nil {:alone :!Ctab}]]
    }
    {
      :des "left shift -> cmd+b (bold)"
      :rules [[:left_shift :left_shift nil {:alone :!Cb}]]
    }
    {
      :des "enter -> enter (alone) left_control (held)"
      :rules [
        [:##return_or_enter :left_control_lazy nil {:alone :return_or_enter}]
      ]
    }
    {
      :des "cmd+quote, cmd+shift+quote -> cmd+close_bracket, cmd+shift+close_bracket"
      :rules [
          [:!Cquote :!Cclose_bracket]
          [:!CSquote :!CSclose_bracket]
      ]
    }
    ;; {
    ;;   ;; ⌘+\ is a common shortcut in apps to close a side panel on the left side. Instead of changing the keybinding in every app/website, just change it here and hope we never need ⌘+' in its original form 🤷‍♂️
    ;;   :des "cmd+' -> cmd+\\"
    ;;   :rules [
    ;;     [:!CSslash :!Cbackslash]
    ;;   ]
    ;; }
    {
      :des "easier 'save as': ctrl+cmd+S shift+opt+cmd+S"
      :rules [
        [:!CTs :!SOCs :!VSCode]
      ]
    }
    {
      :des "app-specific"
      :rules [
        ; Finder
        ;; More ergonomic "Copy as pathname"
        [:!Cp :!COc :Finder]

        ; Messages
        ;; There's a `Go to Next Conversation`, but it's not ergonmic, and weirdly laggy. These staples work better for this purpose, it seems
        [:!Cj :!CSclose_bracket :Messages]
        [:!Ck :!CSopen_bracket :Messages]

        ; Calendar
        [:!Cj :!Cright_arrow :Calendar]
        [:!Ck :!Cleft_arrow :Calendar]
        ;; WIP: A command that triggers a menu item that doesn't have a shortcut (in this case, the "Show Notifications" item in Calendar). Inconsistent right now, as something the `return_or_enter` fires too quickly and doesn't register -- the left/right_arrows are meant to be a hack to delay it, but it's not really working. Trying Keysmith for now
        ;; [:!Cbackslash [:!CSslash :n :o :down_arrow :left_arrow :right_arrow :left_arrow :right_arrow :return_or_enter] :Calendar]

        ; Notes
        ;; More ergonomic "Note List Search"
        [:!CSf :!COf :Notes]
        ;; Need to specify this as a one-off, since a normal Shift mapping won't work for our semicolon-mode
        [:!Cf :!COf [:Notes :semicolon-mode]]

        ; In Chrome, return focus to the document (Chrome doesn't provide any way to do this natively)
        ; Keybindings do this: 1) Focus the omnibar 2) type `j`, then `↵`. This runs a "search" I have in Chrome that runs Javascript that focuses the root "frame" of the document. Running Javascript altogether will focus the document, and focusing the root frame helps return focus after an <iframe> has stolen it
        ;; [:!Cj [:!Cl :j :return_or_enter :g :!Sf] :Chrome]
        [:!Cj [:!Cl :j :return_or_enter] :Chrome]
        ; A backup (open preferences, then close the preferences tab)
        ; [:!Oreturn_or_enter [:!Ccomma :!Cw]]

        ; Allow our custom Vim jump navigation with brackets in the terminal. This needs to be done specially for the terminal, since <C-[> specifically means ESC in the terminal
        [:!Wopen_bracket :!To :Terminals]
        [:!Wclose_bracket :!Ti :Terminals]
        ;; Allow forward Vim jump navigation on Preonic keyboard, where we don't have a ] accessible
        [:!Wquote :!Ti :Terminals]
        [:!Wquote :!Wclose_bracket :VSCode]

        ; Cmd+Esc to stop screenshot video
        [:!Cescape :!CTescape]
      ]
    }
    {
      :des "iTerm"
      :rules [
        :iTerm

        ;; More ergonomic Copy Mode
        ;;; Ctrl-v, to mirror Vim's visual mode (somewhat)
        [:!Tv :!CSc]

        ; Panes
        ;;;;;
        ; Navigating between panes
        [:!CSh :!Copen_bracket]
        [:!CSl :!Cclose_bracket]
        ; Split pane right
        [:!Csemicolon :!Cd]
        ; Split pane down
        [:!CSsemicolon :!CSd]
      ]
    }

    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ; Macros
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    {
      :des "slash-mode (macros)"
      :rules [
        :slash-mode

        ;; Simulates a right click
        [:3 :!Sf10]

        ; VPN
        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
        ;; Connect to configured default country VPN
        [:2 [:opena "NordVPN Teams"]]
        [:1 [:quit "NordLayer"]]

        ; Screenshots
        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
        ; Copy screenshot of selected area
        [:c :!CTS4]
        ; Copy screenshot of full screen
        [:d :!CTOSd]

        ; Rectangle
        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
        ; Window resizing
        [:a :!TOa]
        [:s :!TOs]
        ; Left/right half of current monitor
        [:q :!TOh]
        [:w :!TOl]
        ; Move to next/prev monitor
        [:z :!CTOh]
        [:x :!CTOl]

        ; Alfred
        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
        [:h [:alfred "history" "com.apple.alfred.workflow.chromium-hist"]]
        [:t [:alfred "bookmarks" "com.apple.alfred.workflow.chromium-hist"]]
        [:r [:alfred "recent history" "com.thomasupton.chrome-history"]]
        ; [:b [:alfred "battery" "com.aronhafner.alfred-battery" "level"]]
        ;; Search bluetooth devices to toggle
        [:b :!CTOSb]
        ;; [:b [:alfred "bluetooth list" "de.tilmanginzel.alfred.bluetooth"]]
        ; AirPods
        ;; Connect and set to audio output device
        [:4 :!CSTO4]
        ;; Disconnect (from bluetooth)
        [:5 :!CSTO5]
        [:tab [:alfred "search" "com.sindresorhus.npms"]]
        [:f [:alfred "add to inbox" "com.mikomagni.trello"]]
        ;; Duplicate, for one-handed purposes
        [:period [:alfred "add to inbox" "com.mikomagni.trello"]]
        [:e [:alfred "convert colors" "io.github.g1eny0ung.alfred.colors.workflow"]]
        [:g [:alfred "create reminder" "com.surrealroad.alfred-reminder"]]

        ; Keysmith
        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
        [:caps_lock [:open "keysmith://run-macro/F8C058F7-FE8E-4A61-8B04-56FB04D431FF"]]
      ]
    }
    {
      :des "z-mode (macros)"
      :rules [
        :z-mode

        ; Alfred
        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
        ;; Emoji picker
        [:k [:alfred "pick emoji" "com.github.jsumners.alfred-emoji"]]
        ;; Translate German to English
        [:comma :!CTOcomma]
        ;; Translate English to German
        [:period :!CTOperiod]
        ;; umlaut (uses macOS's option+u for this)
        [:quote :!Ou]
        ;; Unicode symbol search
        [:u [:alfred "search" "pw.symbols-search"]]
        ;; Passwords (Chrome)
        [:p [:alfred "get passwords" "com.github.sadovnychyi.chromepasswords"]]
        ;; Passwords (password manager)
        ;;; Have to use a hotkey, since the Bitwarden workflow can't "show more" properly when the workflow was triggered with an External Trigger
        [:o [:!CTOSo]]
        ;; [:o [:alfred "query bitwarden" "com.lisowski-development.alfred.bitwarden"]]
        [:j [:alfred "jira" "jira.steyep"]]
        ;; Hide notification(s)
        [:h :!CTOSh]
        [:l [:alfred "upcoming calendar events" "net.deanishe.alfred.gcal"]]
        [:m [:!TOSm]]
        ;; [:m [:alfred "query text replacements" "dev.abramczyk.macos-text-replacement"]]
        ;; Quit app
        [:i :!CTOSi]
        ;; Hide app
        [:semicolon :!CTOSsemicolon]
        ;; MDN search ("feeling lucky" Google search on MDN)
        ;;; (Alfred doesn't let me register :!CTOSslash..? ¯\_(ツ)_/¯)
        [:slash :!CTOSm]

        ; Keysmith
        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
        ;; Click notification
        [:return_or_enter [:open "keysmith://run-macro/54216F6C-407F-49B2-8E00-7946BD6F6144"]]
        ;; Reply to notification (e.g. Slack)
        [:open_bracket [:open "keysmith://run-macro/E2756098-1FF9-4D86-BF83-B08F4E27942F"]]
        ;; Add macOS text replacement
        [:y [:open "keysmith://run-macro/BE39EF3D-2ACD-426B-98A1-3C04C94D1B20"]]
        ;; Add Alfred text replacement
        ;; [:8 [:open "keysmith://run-macro/C6D033A7-26A5-4638-B8F4-4B1013B76D8F"]]
        [:n [:alfred "notes" "in.sball.searchnotes"]]
        ;; Hide notifications alternative. This one involves moving the mouse and clicking the notification close button of the top notification. A bit weird visually, plus it takes focus away from the frontmost app 😕
        ;; [:h [:open "keysmith://run-macro/BB7C7C9C-FA43-4C3C-9B47-E874047A3AAA"]]
        
        [:7 :!Cdown_arrow]
        [:8 :!Cup_arrow]
      ]
    }
    {
      :des "quote-mode (media)"
      :rules [
        :tab-mode

        [:j :volume_down]
        [:k :volume_up]
        [:m :mute]
        [:comma :vk_consumer_previous]
        [:period :vk_consumer_next]
        [:spacebar :play_or_pause]

        [:u :display_brightness_decrement]
        [:i :display_brightness_increment]
        [:h :second_brightness_decrement]
        [:l :second_brightness_increment]

        ; Random, not really "media"
        ;; Show notification center
        [:n :f12]
        ;; Zoom out
        [:o :!Chyphen]
        ;; Zoom in
        [:p :!Cequal_sign]

        ;; "Love"/like current Spotify song
        ;; [:open_bracket :!CTOSquote]
      ]
    }

    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ; Launchers
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    {
      :des "x-mode (app launcher)"
      :rules [
        :x-mode

        ;  Most common apps
        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
        [:j [:opena "Google Chrome"] :!Chrome]
        [:j :same_wind_app :Chrome]
        [:k [:opena "Visual Studio Code"] :!VSCode]
        [:k :same_wind_app :VSCode]
        ; Some same/left hand alternatives
        ;; [:c [:opena "Google Chrome"] :!Chrome]
        ;; [:c :same_wind_app :Chrome]
        ;; [:v [:opena "Visual Studio Code"] :!VSCode]
        ;; [:v :same_wind_app :VSCode]

        [:l [:opena "Slack"]]

        ; Also common
        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
        [:n [:opena "Notes"]]
        [:semicolon [:opena "iTerm"]]
        [:m [:opena "Messages"]]
        [:i [:opena "Trello"]]
        [:u [:opena "Spotify"]]
        ;; Office/Zoom
        [:o [:opena "Wonder"]]
        [:y [:opena "Calendar"]]
        [:quote [:opena "Keysmith"]]
        [:comma [:opena "System Preferences"]]
        [:period [:opena "Alfred Preferences"]]
        [:open_bracket [:opena "Preview"]]
        [:p [:opena "Reminders"]]
        ;; Duplicate for Preonic, since I don't have an `open_bracket` on that keyboard
        [:delete_or_backspace [:opena "Preview"]]
        [:slash [:opena "Finder"]]
        [:0 [:opena "Bitwarden"]]

        ; Less common
        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
        [:9 [:opena "Activity Monitor"]]
        [:8 [:opena "Karabiner-Elements"]]
        [:7 [:opena "Karabiner-EventViewer"]]
        [:close_bracket [:opena "WhatsApp"]]
        [:h [:opena "WhatsApp"]]
        [:g [:opena "Photos"]]
        [:t [:opena "Emmet Cheat Sheet"]]
        [:b [:opena "Books"]]
      ]
    }
    {
      :des "q-mode (websites)"
      :rules [
        :q-mode

        ; Work
        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
        [:n [:openw "www.notion.so/wonderme/Product-Engineering-Team-831260e699944dc8b51f24382bf7bc40"]]
        ;; Jira - Board
        [:j [:openw "wonder-me.atlassian.net/jira/software/c/projects/FEN/boards/35"]]
        ;; Jira - Bugs
        [:slash [:openw "wonder-me.atlassian.net/secure/RapidBoard.jspa?rapidView=29"]]
        ;; Jira - Backlog
        ;; [:slash [:openw "wonder-me.atlassian.net/secure/RapidBoard.jspa?rapidView=18&projectKey=COCKPIT&view=planning.nodetail&issueLimit=100"]]
        ;; Work calendar
        [:y [:openw "calendar.google.com/calendar/u/1/r"]]
        ;; Work email
        [:k [:openw "mail.google.com/mail/u/1"]]
        ;; Add custom emojis to Slack
        [:e [:openw "wonderdotme.slack.com/customize/emoji?utm_source=in-prod&utm_medium=inprod-customize_link-slack_menu-click"]]

        [:m [:openw "mail.google.com/mail/u/0"]]
        ;; White noise
        [:h [:openw "mynoise.net/NoiseMachines/whiteNoiseGenerator.php?l=50464238343027242118&d=0"]]
        [:g [:openw "drive.google.com"]]
        ;; Money projections
        [:p [:openw "docs.google.com/spreadsheets/d/1lMo3BA_I2MRrxaTjVNOaowP0ziiGrmTWvwBGYcxj6Ac/edit#gid=229770528"]]
        [:f [:openw "fast.com/"]]
        [:open_bracket [:openw "www.linkedin.com/in/brett-abramczyk/"]]
        [:u [:openw "youtube.com"]]
        [:o [:openw "amazon.de"]]
        [:v [:openw "voice.google.com"]]
        ;; [:r [:openw "trello.com/b/32pWVaoh/%F0%9F%87%A9%F0%9F%87%AA-berlin-livin"]]
        [:8 [:openw "google.com/maps"]]

        ; Keysmith/login sites
        ;; Sites that require you to log in each
        ;; session. So, we do it through Keysmith
        ;; so that we can automate clicking the
        ;; Sign In button
        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
        ;; [:i [:openw "accounts.intuit.com/index.html?offering_id=Intuit.ifs.mint"]]
        ;; Mint
        [:i [:open "keysmith://run-macro/7FBA7681-5813-4EF3-98AE-D36B97AAFF92"]]
        ;; N26
        [:6 [:open "keysmith://run-macro/BADD1A95-B3BB-4561-B90E-1738B351CAEF"]]
        ;; [:6 [:open "/Users/brett/Applications/Chrome\\ Apps.localized/N26.app"]]
        ;; Schwab
        [:b [:open "keysmith://run-macro/48481C68-2E36-4D36-B4C9-0A46B954B50F"]]
        ;; Capital One
        [:0 [:open "keysmith://run-macro/26BE7270-9742-406D-95BA-7AE34A73700A"]]
      ]
    }
    {
      :des "period-mode (repos, files, work stuff)"
      :rules [
        :period-mode

        ;; Personal
        [:s [:opena "Visual Studio Code" "~/src/personal/dotfiles"]]
        [:w [:opena "Visual Studio Code" "~/Dropbox/wiki"]]
        [:b [:open "~/src/personal/dotfiles/karabiner/karabiner.edn"]]
        [:q [:open "~/src/personal/qmk_firmware/keyboards/preonic/keymaps/babramczyk/keymap.c"]]

        ;; Frontend
        [:4 [:alfred "open in iTerm" "dev.abramczyk.search-folders" "~/src/work/wonder-web"]]
        ;; [:r [:openw "gitlab.com/wonder.me/wonder-web/-/merge_requests"]]
        ;; With Cockpit label
        [:r [:openw "gitlab.com/wonder.me/wonder-web/-/merge_requests"]]
        ;; [:r [:openw "gitlab.com/wonder.me/wonder-web/-/merge_requests?scope=all&state=opened&label_name[]=cockpit"]]
        [:f [:opena "Visual Studio Code" "~/src/work/wonder-web"]]
        [:v [:openw "gitlab.com/wonder.me/wonder-web/"]]

        ;; Backend
        [:3 [:alfred "open in iTerm" "dev.abramczyk.search-folders" "~/src/work/wonder-backend"]]
        [:e [:openw "gitlab.com/wonder.me/wonder-backend/-/merge_requests"]]
        [:d [:opena "Visual Studio Code" "~/src/work/wonder-backend"]]
        [:c [:openw "gitlab.com/wonder.me/wonder-backend/"]]

        ;; URLs
        ;;; Local
        [:z [:openw "app.wonder.loc/?spaceId=e4a4a98b-66d5-4684-aacc-e9fa52bfa258"]]
        ;;; Staging
        [:a [:openw "app.wonder.ac/?spaceId=e33614aa-628a-46e4-bc53-f53e8b71873e"]]
        ;;; Prod
        [:x [:openw "app.wonder.me/?spaceId=686f1f74-59a1-41d0-9832-a74eb4888462"]]

        ;; Search local repos
        [:g [:alfred "search repos" "net.deanishe.alfred-git-repos"]]
        ;; Search GitLab repos
        [:t [:alfred "search repos" "com.lukewaite.alfred-gitlab"]]
        ;; My merge requests
        [:m [:alfred "my merge requests" "dev.abramczyk.gitlab"]]
      ]
    }

    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ; Text and input
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    {
      :des "comma-mode/symbol-mode (symbols and snippets)"
      :rules [
        :comma-mode

        ; Brackets
        [:q :close_bracket] ; ]
        [:w :open_bracket] ; [
        [:a :!Sopen_bracket] ; {
        [:s :!S9] ; (
        [:z :!Sclose_bracket] ; }
        [:x :!S0] ; )

        [:f :grave_accent_and_tilde] ; `
        [:d :hyphen] ; -

        [:c :!S4] ; $
        [:e :!Squote] ; "
        [:r :!S1] ; !
        [:v :!S7] ; &

        [:g :equal_sign] ; =
        [:caps_lock :!S8] ; *
        [:t :!Sequal_sign] ; >
        [:b :!Shyphen] ; _
        [:tab :!Sbackslash] ; |

        ;; This could stay or go, doesn't really matter, I have a text replacement for it anyway
        [:2 :!SO2] ; €
        [:3 [:!Speriod :spacebar :!S8 :!S8 :!Sn :o :t :e :!Ssemicolon :!S8 :!S8 :spacebar]] ; -> > **Note:**␣
        ;; Not sure if this is even better than just omitting it ¯\_(ツ)_/¯
        [:4 [:slash :!S8 :!S8]] ; -> /**

        ;; Spacebar is the only key I type very quickly after comma
        ;; By mapping this specific case, this allows us to use this mode as a `layer`, which allows us to release comma before we release the key we're using for an actual symbol, which lets us type these symbols quicker and with more ease :)
        ;; It also allows us to hold down comma without a repeat -- we don't need comma repeats, and we might hold down comma before we've decided what key we're going to press for a symbol
        [:spacebar [:comma :spacebar]]
      ]
    }
    {
      ;; NOTE: If using any of the original keys here (i.e. the ones that are being remapped) for things like layers and simlayers, they need to come **after** the layer's rule block. This is ostensibly because we can't remap the original key before it even has rules for its "mode"
      ;;; (and, just using a layers based on the remapping doesn't seem to work either -- even if the remapping has no modifiers)
      :des "replaced symbol keys, that are no longer necessary since we have a 'symbol mode'"
      :rules [
        ; ' key
        [:quote :!Sslash] ; [ -> ?
        [:!Squote [:spacebar :hyphen :hyphen :spacebar]] ; ␣--␣

        ; [ key
        ;; Apostrophes are less and less useful as I add any words that include one to my macOS text replacement dictionary. So move it up a bit, to make room for the much more commonly used `?`
        ;; Depending on how little I end up using this going forward, it might even make sense to swap this and `. I use the backtick all the time, and it'd also be nice for jumping to Vim marks. Though I still need apostrophes when typing comments in an editor :(
        ;; [:open_bracket :open_bracket :nil {:alone :quote}] ; [ -> '
        [:open_bracket :quote] ; [ -> '
        [:!Sopen_bracket :backslash] ; \

        ; / key
        ;; (could maybe do # here instead)
        [:!Sslash :!Sgrave_accent_and_tilde] ; -> ~

        ; Shift + numbers (right side; left side are in semicolon-mode rules)
        [:!S7 [:grave_accent_and_tilde :grave_accent_and_tilde :grave_accent_and_tilde]] ; ```
        [:!S8 [:equal_sign :equal_sign :equal_sign]] ; ===
        [:!S9 [:!S1 :equal_sign :equal_sign]] ; !==

        ;; Available: Shift numbers 1, 2, 5, 6, 0
        ;; Available: Shift -, Shift = (only on Macbook keyboard)
        ;; Candidate: // TODO
      ]
    }
    {
      ;; Just mapping semicolon to shift gets tricky sometimes, with rules conflicting. So, this way, we get more fine-grained control, and can do things like using the caps lock key in this mode for actual caps lock
      :des "semicolon-mode (simulated 'shift mode')"
      :rules [
        :semicolon-mode

        [:grave_accent_and_tilde :!Sgrave_accent_and_tilde] ; -> ~
        ;; Replaced ! with ^, since we have ! in symbol mode
        [:1 :!S6]
        [:2 :!S2]
        [:3 :!S3]
        ;; Replaced $ with %, since we have $ in symbol mode
        [:4 :!S5]
        [:5 :!S5]
        [:tab :!Stab]
        [:q :!Sq]
        [:w :!Sw]
        [:e :!Se]
        [:r :!Sr]
        [:t :!St]
        [:y :!Sy]
        [:u :!Su]
        [:i :!Si]
        [:o :!So]
        [:p :!Sp]
        [:a :!Sa]
        [:s :!Ss]
        [:d :!Sd]
        [:f :!Sf]
        [:g :!Sg]
        [:h :!Sh]
        [:j :!Sj]
        [:k :!Sk]
        [:l :!Sl]
        [:z :!Sz]
        [:x :!Sx]
        [:c :!Sc]
        [:v :!Sv]
        [:b :!Sb]
        [:n :!Sn]
        [:m :!Sm]

        ; Combination with other modifiers
        ;
        ; Only have keys on the left side of the keyboard for now, as that's the only time I'd be using the "right shift"/semicolon for command combos. Also, only ⌘ combos handled for now
        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
        ;; Best we can do right now to keep the semicolon as a shift modifier with other keys (like command). Not perfect, since you have to hold down the semicolon before any other modifier
        [:!Cq :!CSq]
        [:!Cw :!CSw]
        [:!Ce :!CSe]
        [:!Cr :!CSr]
        [:!Ct :!CSt]
        [:!Ca :!CSa]
        [:!Cs :!CSs]
        [:!Cd :!CSd]
        [:!Cf :!CSf]
        [:!Cg :!CSg]
        [:!Cz :!CSz]
        [:!Cx :!CSx]
        [:!Cc :!CSc]
        [:!Cv :!CSv]
        [:!Cb :!CSb]
        [:!C1 :!CS1]
        [:!C2 :!CS2]
        [:!C3 :!CS3]
        [:!C4 :!CS4]
        [:!C5 :!CS5]

        ;; Enter a simulated caps lock mode, instead of triggering actual caps lock. See the mode below for details
        [:caps_lock ["caps-lock-mode" 1]]
      ]
    }
    ;; This mode is necessary, since while in the hardware-defined caps lock "mode", the caps lock key is always the key to exit it -- which prevents the key from being escape/control like it normally is. This causes a weird scenario, where when we're using the hardware's caps lock, the caps lock key customizations are taken away from us, which can be disorienting
    ;; So instead, we have a Goku layer for it -- letters pressed during this mode will be capital, and we still have our escape/control functionality for the actual caps lock key
    {
      :des "caps-lock-mode"
      :rules [
        :caps-lock-mode

        [:caps_lock :right_control_lazy nil {:alone  ["caps-lock-mode" 0]}]

        [:q :!Sq]
        [:w :!Sw]
        [:e :!Se]
        [:r :!Sr]
        [:t :!St]
        [:y :!Sy]
        [:u :!Su]
        [:i :!Si]
        [:o :!So]
        [:p :!Sp]
        [:a :!Sa]
        [:s :!Ss]
        [:d :!Sd]
        [:f :!Sf]
        [:g :!Sg]
        [:h :!Sh]
        [:j :!Sj]
        [:k :!Sk]
        [:l :!Sl]
        [:z :!Sz]
        [:x :!Sx]
        [:c :!Sc]
        [:v :!Sv]
        [:b :!Sb]
        [:n :!Sn]
        [:m :!Sm]
      ]
    }
    ;; This has to come later, so we can remap with caps lock in shift and caps lock modes
    {
      :des "caps lock -> escape (alone) left_control (held)"
      :rules [
        ; Using right_ctrl lets us use left_control as a hyper key
        [:#CTOSFQWEcaps_lock :right_control_lazy nil {:alone :escape}]
      ]
    }
    {
      :des "text nav and manipulation (with left ctrl/caps lock)"
      :rules [
        ; Char and word-wise nav
        [:!W#SRh :left_arrow]
        [:!W#SRj :down_arrow]
        [:!W#SRk :up_arrow]
        [:!W#SRl :right_arrow]
        [:!W#SRy :!Oleft_arrow]
        [:!W#SRo :!Oright_arrow]

        ; Char and word-wise deletion
        [:!Wu :!Odelete_or_backspace]
        [:!Wi :delete_or_backspace]
        [:!W7 :!Odelete_forward]
        [:!W8 :delete_forward]

        ; To start and end of line
        [:!W#SRn :!Cleft_arrow :!Terminals]
        [:!W#SRm :!Cright_arrow :!Terminals]
        ; Terminal doesn't support ⌘ like above, so gotta use its Cocoa keybindings
        [:!Wn :!Ta :Terminals]
        [:!Wm :!Te :Terminals]

        ; Line deletion
        ; Use Cocoa emacs bindings for apps that doesn't support ⌘+⌦ (i.e. Notes, Terminal)
        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
        ; Delete line backward
        [:!Wcomma :!Cdelete_or_backspace [:!Terminals]]
        [:!Wcomma :!Tu [:Terminals]]
        ; Delete line forward
        ; Ideally this would just be ⌘+⌦, but that's not respected everywhere (e.g. browser textareas, VS Code's integrated terminals)
        [:!Wperiod [:!CSright_arrow :delete_or_backspace] [:!Notes :!Terminals :!VSCode]]
        [:!Wperiod :!Tk]
        ; Delete full line
        [:!Wslash [:!Cright_arrow :!Cdelete_or_backspace] [:!Terminals :!VSCode]]
        ; Terminals don't support ⌘+← or ⌘+⌦. So instead, we rely on the original Cocoa Emacs commands for them
        [:!Wslash [:!Te :!Tu] :Terminals]
        ; For VS Code, it's trickier -- you want to preserve indentation, but also want it to behave nicely in the integrated terminal…
        [:!Wslash [:!Cright_arrow :!Cdelete_or_backspace] :VSCode]

        ; Clear everything
        [:!Wdelete_or_backspace [:!Ca :delete_or_backspace]]

        ; Page up/down
        [:!Oj :page_down]
        [:!Ok :page_up]
      ]
    }
    ;; TODO: Reconsider this. Is it too much of a pain to switch from Caps Lock down to z and x? Considering that's frequently where we'll be coming from. Could just go back to using tab... Or make z-x-mode responsible for media and flip them
    {
      :des "z-x-mode (selection-mode: text nav with selection)"
      :rules [
        :z-x-mode

        ; Char and word-wise nav
        [:h :!Sleft_arrow]
        [:j :!Sdown_arrow]
        [:k :!Sup_arrow]
        [:l :!Sright_arrow]
        [:y :!OSleft_arrow]
        [:o :!OSright_arrow]

        ; To start and end of line
        [:n :!CSleft_arrow :!Terminals]
        [:m :!CSright_arrow :!Terminals]
        ; Terminal doesn't support ⌘ like above, so gotta use its Cocoa keybindings
        ;; We'll add this functionality if we need it. Don't know if it's even possible i.e. in iTerm to select with native keyboard commands
        ;; [:n :!Ta :Terminals]
        ;; [:m :!Te :Terminals]

        ;; TODO: Do m and n's functionality above in succession to select the whole line 😲
      ]
    }
  ]

  :applications {
    :VSCode ["^com\\.microsoft\\.VSCode(Insiders)?$"]
    :Chrome [
      "^com\\.google\\.Chrome$",
      ;; "^org\\.chromium\\.Chromium$",
      ;; "^com\\.google\\.Chrome\\.canary$"
    ]
    :Firefoxes [
      "^org\\.mozilla\\.firefox$",
      "^org\\.mozilla\\.firefoxdeveloperedition$"
    ]
    :Terminals [
      "^com\\.apple\\.Terminal$"
      "^com\\.googlecode\\.iterm2$"
      "^co\\.zeit\\.hyperterm$"
      "^co\\.zeit\\.hyper$"
      "^io\\.alacritty$"
      "^net\\.kovidgoyal\\.kitty$"
    ]
    :iTerm ["^com\\.googlecode\\.iterm2$"]
    :Finder ["^com\\.apple\\.finder$"]
    :Notes ["^com\\.apple\\.Notes$"]
    :Messages ["^com\\.apple\\.MobileSMS$"]
    :Calendar ["^com\\.apple\\.iCal$"]
    :Debuggers [
      "^org\\.mozilla\\.firefox$"
    "^org\\.mozilla\\.firefoxdeveloperedition$"
    "^com\\.google\\.Chrome$"
    "^org\\.chromium\\.Chromium$"
    "^com\\.google\\.Chrome\\.canary$"
    "^com\\.apple\\.Safari$"
    "^com\\.microsoft\\.VSCode(Insiders)?$"]
    :Alfred ["^com\\.runningwithcrayons\\.Alfred$"]
    :Keybase ["^keybase\\.Electron$"]
    :Browsers [
      "^org\\.mozilla\\.firefox$"
      "^org\\.mozilla\\.firefoxdeveloperedition$"
      "^com\\.google\\.Chrome$"
      "^org\\.chromium\\.Chromium$"
      "^com\\.google\\.Chrome\\.canary$"
      "^com\\.apple\\.Safari$"
    ]
  }
}

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Notes, ideas, and reference
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Hyper Keys
;; Sometimes need to use "hyper" keys (unlikely modifier combos) for different scenarios. i.e. if you want to use a Karabiner modifier (like z/z-mode) to trigger something in another app with a Keybinding (like Alfred or Keysmith)
;; For these, use this list in the following order. If a letter to go with the hyper key combo is taken, go to the next
;; NOTE: Tried to use the F modifier (fn key), but Alfred doesn't seem to play well with that 🤷🏼‍♂️
;;; CTOS (in use)
;;; TOS (in use)
;; Why it's necessary in Alfred: Using an external trigger doesn't work. One example of this is because it spawns the Alfred search bar (https://www.alfredforum.com/topic/16568-external-trigger-is-showing-search-bar-when-not-necessary/?do=findComment&comment=84848)

; Plain Rule Ideas
  ; Using simultaneous keypresses to enter some kind of modal/context. ⎋ exits it (see Shawn's "in-context" mode) (this is pretty cool. Plus, I don't think simultaenous rules end up creating lag. Could use it for a lot of things. Examples `s+d`, `j+k`)
  ; Using simultaneous keypresses for singular actions (might be cool, though something to keep an eye on is the difficulty of pressing the keys simultaneously)

; Hyper key ideas: (only when used alone -- see Shawn's usage for "left option when used alone")
  ; Left control
  ; Left option

; Simlayer ideas:
  ; Having simlayers dependent on the app (Shawn) (`s` mode in VS Code, `s` mode in Chrome, etc.)
  ; Using a simlayer for the ctrl key, e.g. `a` (cool, but a simlayer on `a` is going to be hella annoying)
  ; Using a simlayer for ⌘+⇧ (Nikita) (useful for ergonomics)
  ; Using a simlayer for ⌘ (Nikita) (useful for ergonomics)
  ; Using a simlayer for media controls (Nikita)
  ; Using a simlayer to control Chrome debug mode (Shawn) (cool because their keyboard shortcuts are lacking sometimes)

; Simlayer key ideas
  ; tilde
  ; backslash
  ; tab
  ; comma
  ; right shift
  ; q, w, x, z, j, numbers
  ; https://en.wikipedia.org/wiki/Letter_frequency

; Goku Syntax
;; !  | means mandatory -   modifier(s) alone when pressend change behavior
;; #  | means optional  -   modifiers are optional (but atleast one necessary)
;; ## | optional any
;; !! | command + control + optional + shift (hyper)
;; C  | left_command (Emacs: hyper)
;; T  | left_control (Emacs: control)
;; O  | left_option (Emacs: meta)
;; S  | left_shift
;; F  | fn (Emacs: super)
;; Q  | right_command (Emacs: control)
;; W  | right_control (Emacs: control)
;; E  | right_option (Emacs: )
;; R  | right_shift
