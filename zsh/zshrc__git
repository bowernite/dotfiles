source ~/src/personal/dotfiles/zsh/zshrc__graphite

function git_show_modified_files() {
  local ask_to_commit=${1:-true}
  if [[ $(git status --porcelain) ]]; then
    echo -e "\nüìù \033[0;33mModified files:\033[0m"
    git status --porcelain

    if [[ "$ask_to_commit" == true ]]; then
      echo -e "\nDo you want to commit all modified files? (y/n)"
      read -k 1 -s answer
      echo $answer
      if [[ $answer == "y" ]]; then
        git add .
        git commit -m "lint & format"
        echo -e "\n‚úçÔ∏èüèº \033[0;32mAll modified files have been committed.\033[0m"
      fi
    fi
  fi
}

alias g="gt"

# "git checkout branch"
alias gcob="git co -b"

# "git start": Starts a new branch from the latest version of the development branch
# If I need this again, it needs a new name. It wiped out my work one time üò≠
# alias gs="gcod && gcob"

# "git checkout main/dev"
# Also resets to HEAD, since that's pretty much always what I want when switching to one of these branches. Could also `git fetch` here before resetting to HEAD, but not sure if that's desirable yet + not necessary when in VS Code, since it fetches automatically in the background
# Also prunes local branches that have been merged
# alias gcom="git co \$(git_main_branch) && groh && gbda"
# alias gcod="git co \$(git_dev_branch) && groh && gbda"
gcom() {
  if git_has_changes; then
    echo -e "\n‚ö†Ô∏è \033[0;33mLocal changes would be lost. Please stash them first.\033[0m"
    return 1
  fi
  git co $(git_main_branch) && git reset --hard origin/HEAD
}

gcod() {
  if git_has_changes; then
    echo -e "\n‚ö†Ô∏è \033[0;33mLocal changes would be lost. Please stash them first.\033[0m"
    return 1
  fi

  git co $(git_dev_branch) && git reset --hard origin/HEAD
}
# Should probably only use these when trying to check out files from origin/dev or origin/main
# NOTE: Doing this (at least when the local version of the branch is not up-to-date) will put Git in a "detached head" state -- not just reset the local branch to origin's HEAD)
alias gcoom="git co origin/\$(git_main_branch)"
alias gcood="git co origin/\$(git_dev_branch)"

# "git checkout all"
alias gc.="gco ."

# Override existing git aliases from the oh-my-zsh plugin to all use this custom `gc` alias, which uses `--no-verify`. This allows us to always circumvent pre-commit hooks that slow us down üôàü§∑‚Äç‚ôÇÔ∏è
alias gc="git commit --no-verify"
alias gcm="gc -m"
alias gcam="gc -am"
alias 'gc!'='gc -v --amend'
alias gca='gc -v -a'
alias 'gca!'='gc -v -a --amend'
alias gcam='gc -a -m'
alias 'gcan!'='gc -v -a --no-edit --amend'
alias 'gcans!'='gc -v -a -s --no-edit --amend'
alias gcmsg='gc -m'
alias 'gcn!'='gc -v --no-edit --amend'
alias gcs='gc -S'
alias gcsm='gc -s -m'

# "git commit lazy": Commit all if no staged changes, otherwise commit only staged files. Mirrors VS Code's behavior for commiting
gci() {
  if git diff --cached --quiet; then
    # No files are staged -- commit all unstaged changes
    git add -A -- .
    gc $@
  else
    # Files are staged -- only commit them
    gc $@
  fi
}
# Commit lazy, with a message
# NOTE: A copy of this logic (without using zsh aliases) exists as an executable in `bin` in this repository. See that script for details why
# alias gcim="gci -m"

# "git pull origin main"
# `--no-edit` suppresses editing the commit message when doing the pull as a merge
alias gpom="git pull origin \$(git_main_branch) --no-edit"
# "git pull origin dev"
# `--no-edit` suppresses editing the commit message when doing the pull as a merge
alias gpod="git pull origin \$(git_dev_branch) --no-edit"

# Change "git diff" to ignore whitespace changes by default
alias gd="git diff -w"

# "git diff origin dev"
alias gdod="git fetch && gd origin/\$(git_dev_branch)"
# "git diff origin main"
alias gdom="git fetch && gd origin/\$(git_main_branch)"

# Git diffing with origin/master and origin/<dev_branch>
alias gr="git rev"
alias grem="git remote" # (original oh-my-zsh `gr` alias)

# "git undo": "undoes" the last commit, and puts its changes back into the index
alias gundo="git reset HEAD~"
# "git undo soft/staged": "undoes" the last commit, and puts its changes into the staging area
alias gundos="git reset HEAD~ --soft"

# "git abandon": See gitconfig alias for details
gab() {
  echo
  echo "\033[1;33m‚ö†Ô∏è Warning: This will delete the current branch, and it will be lost forever.\033[0m"
  echo "\033[1;34mü§î Are you sure you want to proceed? (y/N)\033[0m"
  read -k 1 response
  if [[ $response =~ ^[Yy]$ ]]; then
    echo
    git abandon
  else
    echo
    echo "\033[1;31m‚ùå Operation cancelled.\033[0m"
  fi
}

# "git branch modify": Rename a branch
alias gbm="git branch -m"

alias gap="git add --patch"

# Remap oh-my-zsh's default `gup`
alias gpr="git pull --rebase"

# Quick committs with `gitupdate` go package
alias gup="gitupdate ."

# "git publish": Pushes a branch to remote. See .gitconfig for implementation
alias gpub="git publish"
# "git unpublish"
alias gunpub="git unpublish"

# "git fixup": Quick fixup commits
# This one does all files, or just the ones staged, if any
alias gix="gcim 'fixup'"
# Explicitly select all files
alias gixa="gc -a -m 'fixup'"

# "git authors": See how many lines of code each dev/author is responsible for
# Source: https://stackoverflow.com/questions/4589731/git-blame-commit-statistics
alias gauth="git ls-tree -r -z --name-only HEAD -- $1 | xargs -0 -n1 git blame \
--line-porcelain HEAD |grep  '^author '|sort|uniq -c|sort -nr"

# "git merge continue": add all files that had conflicts, and finish the merge (skip editing the commit message, since `true` is working here as a no-op editor)
alias gmc="gaa && GIT_EDITOR=true gc"

# Change "git rebase continue" to skip editing the commit message (since `true` is working here as a no-op editor)
alias grbc="GIT_EDITOR=true git rebase --continue"
# "git rebase next": Add all files and continue the rebase
alias grbn="git add . && grbc"

# "git forget": Remove all files that used to be tracked, but aren't any longer (by gitignore)
alias gforget="git rm -r --cached . && git add ."

# "git conflicts": Show all files with conflicts (does so by using `git diff`, because in the case of rebase/merge conflicts, only conflict files will be in the index)
alias gconflicts="git diff --name-only | uniq"
# "git fix": Open all files with conflicts (in VS Code)
# NOTE: The subshell/cd stuff is to ensure that this works no matter where in the git directory we are (since git diff will spit out paths from the repo root, we need to be in the repo root when we open the files in our editor)
alias gfix="git diff --name-only | uniq | (cd \$(git repo-root) && xargs cursor)"

# "git summary": Show a summary of a commit (i.e. without the diff)
alias gsm="git show --quiet"
# Even less info (i.e. no commit author or time)
alias gsmo="gsm --oneline"

# Pull in latest dev, and run any on-pull scripts in the repo
gsn() {
  gt sn

  local repo_root="$(git repo-root)"
  local brett_dir="$repo_root/.brett"
  local on_pull_script="$brett_dir/bin/on-pull.sh"
  if [[ -d "$brett_dir" && -f "$on_pull_script" ]]; then
    "$on_pull_script"
  fi
}

git_dev_branch() {
  if [[ -n $(git branch --list develop) ]]; then
    echo develop
  elif [[ -n $(git branch --list development) ]]; then
    echo development
  elif [[ -n $(git branch --list dev) ]]; then
    echo dev
  elif [[ -n $(git branch --list main) ]]; then
    echo main
  else
    echo master
  fi
}

###########################################################
# Returns 0 if there are any git changes, 1 if not
#
# Reference: https://stackoverflow.com/questions/3878624/how-do-i-programmatically-determine-if-there-are-uncommitted-changes
###########################################################
git_has_changes() {
  git update-index -q --refresh
  ! git diff-index --quiet HEAD --
}

###########################################################
# Finds the parent branch of the current branch
# Attempts to determine which branch the current branch was forked from
# Uses the following strategies in order:
# 1. Try to get parent branch from Graphite if available
# 2. Find the best common ancestor using merge-base with candidate branches
# 3. Default to the dev branch if all else fails
###########################################################
git_parent_branch() {
  local current_branch=$(git rev-parse --abbrev-ref HEAD)
  
  # First, try to get parent branch from Graphite if it's tracked
  if command -v gt >/dev/null 2>&1; then
    local graphite_parent=$(gt parent 2>/dev/null)
    if [[ -n "$graphite_parent" ]]; then
      echo "$graphite_parent"
      return
    fi
  fi
  
  local current_branch_start=$(git rev-list --max-parents=0 "$current_branch" 2>/dev/null | head -n1)
  
  # If branch has its own root commit, it's not branched from anywhere in this repo
  if [[ -n "$current_branch_start" && "$current_branch_start" != $(git rev-list --max-parents=0 HEAD 2>/dev/null) ]]; then
    git_dev_branch
    return
  fi
  
  # Get local branches excluding the current one
  local branches=$(git for-each-ref --format='%(refname:short)' refs/heads/ | grep -v "^$current_branch$")
  
  # Find the best candidate by looking for most recent common ancestor
  local best_branch=""
  local best_commit=""
  local best_count=0
  
  for branch in $branches; do
    # Find merge-base (common ancestor) and count commits since then
    local base=$(git merge-base "$current_branch" "$branch" 2>/dev/null)
    if [[ -z "$base" ]]; then
      continue
    fi
    
    # Count commits from base to branch (fewer commits = closer relationship)
    local count=$(git rev-list --count "$base..$branch" 2>/dev/null)
    
    # Use the branch that has the closest relationship (fewest commits since diverging)
    if [[ -z "$best_branch" || "$count" -lt "$best_count" ]]; then
      best_branch="$branch"
      best_commit="$base"
      best_count="$count"
    fi
  done
  
  if [[ -n "$best_branch" ]]; then
    echo "$best_branch"
    return
  fi
  
  # If everything fails, default to the development branch
  git_dev_branch
}

# "git diff": Diffs the current branch against its parent branch, specified branch, dev branch, or origin dev
# Usage: diff [--dev] [--origin-dev] [compare_branch] [git_diff_args...]
#   - If no compare_branch is provided, it automatically finds the parent branch
#   - If --dev is provided, it compares against the dev branch
#   - If --origin-dev is provided, it compares against the origin dev branch
#   - Any additional arguments are passed to git diff
diff() {
  local current_branch=$(git rev-parse --abbrev-ref HEAD)
  local compare_branch
  local other_args=()
  local has_branch=false

  # Process options first
  while [[ $# -gt 0 ]]; do
    case "$1" in
      --dev)
        compare_branch=$(git_dev_branch)
        shift
        ;;
      --origin/dev)
        compare_branch="origin/$(git_dev_branch)"
        shift
        ;;
      -*)
        # This is a git diff option, add to other_args
        other_args+=("$1")
        shift
        ;;
      *)
        # This is likely the compare branch
        if [[ -z "$compare_branch" && "$has_branch" == "false" ]]; then
          compare_branch="$1"
          has_branch=true
          shift
        else
          # Any other non-option arguments
          other_args+=("$1")
          shift
        fi
        ;;
    esac
  done

  # If no compare branch was specified, find the parent branch
  if [[ -z "$compare_branch" ]]; then
    compare_branch=$(git_parent_branch)
  fi

  local merge_base=$(git merge-base "$current_branch" "$compare_branch")

  echo "üåø Current branch: $current_branch" && echo "üîÄ Comparing against: $compare_branch" && echo "üîó Merge base: $merge_base"

  git diff "${other_args[@]}" "$merge_base" "$current_branch" ":(exclude)package-lock.json"
}
