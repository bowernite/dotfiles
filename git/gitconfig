[user]
  name = "Brett"
  email = bjabramczyk@gmail.com

# Work-specific config
# Source: https://stackoverflow.com/questions/4220416/can-i-specify-multiple-users-for-myself-in-gitconfig/43654115#43654115
[includeIf "gitdir:~/src/work/"]
  path = ~/src/work/.gitconfig

[alias]
  branch-name = "!git rev-parse --abbrev-ref HEAD"
  # Prints the branch name of the main development branch
  dev-branch = !" \
      f() { \
          if [[ -n $(git branch --list develop) ]]; then \
              echo develop; \
          elif [[ -n $(git branch --list development) ]]; then \
              echo development; \
          elif [[ -n $(git branch --list main) ]]; then \
              echo main; \
          elif [[ -n $(git branch --list staging) ]]; then \
              echo staging; \
          else \
              echo master; \
          fi \
      }; \
      f"
  st = status
  publish = "!git push -u origin $(git branch-name)"
  unpublish = "!git push origin :$(git branch-name)"
  co = checkout
  cob = checkout -b
  ci = commit
  br = branch
  prune-local = "!git fetch -p && git br -D master && for branch in `git branch -vv | grep ': gone]' | awk '{print $1}'`; do git branch -D $branch; done"
  # Mark a file as "assume unchanged", which means that Git will treat it
  # as though there are no changes to it even if there are. Useful for
  # temporary changes to tracked files
  assume = update-index --assume-unchanged
  # Reverse the above
  unassume = update-index --no-assume-unchanged
  # Show the files that are currently assume-unchanged
  assumed = "!git ls-files -v | grep ^h | cut -c 3-"
  repo-root = "!git rev-parse --show-toplevel"

  # Delete the current branch, and checkout whichever branch is for developing. Also resets hard to HEAD, since that's always what I want to do when doing this operation
  abandon = !"BRANCH_NAME=$(git branch-name) && git co $(git dev-branch) && git br -D $BRANCH_NAME && git reset origin/$(git branch-name) --hard"

  wip = "!git add -A; git rm $(git ls-files --deleted) 2> /dev/null; git commit --no-verify --no-gpg-sign -m '--wip-- [skip ci]'"
  unwip = "!git log -n 1 | grep -q -c -e \"--wip--\" && git reset HEAD~1"

  # Remove files from git that are now ignored
  remove-ignored = !"git ls-files --ignored --exclude-standard --cached | sed 's/.*/"&"/' | xargs git rm -r --cached"

  rev = !"git fetch && git diff origin/$(git dev-branch)"


# I have no idea what this is or how this got here :)
[filter "lfs"]
  clean = git-lfs clean -- %f
  smudge = git-lfs smudge -- %f
  process = git-lfs filter-process
  required = true
  unstage = reset HEAD

[stash]
  # Make 'git stash show <stash>' show the diff the stash would create if applied
  showPatch = true
[fetch]
  # Prune remote-tracking branches that have been deleted every time running `git fetch`
  prune = true

# Setting these to `false` for a command prints output to stdout instead opening it in `less`
[pager]
  branch = false
  stash = false

[pull]
  rebase = false

[core]
  excludesfile = ~/.gitignore_global

[delta]
  features = line-numbers decorations

[delta "decorations"]
  file-decoration-style = none
[init]
	defaultBranch = main
[interactive]
	diffFilter = delta --color-only --syntax-theme=GitHub
