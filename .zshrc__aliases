#####################################################################
# Dev Utils
#####################################################################

#################################################
# Returns 0 if project is a yarn project, 1 if not. If it's not and it's a node project, this probably means it's npm we're working with
#
# Arguments: none
#################################################
is_yarn_project() {
  if [[ -e yarn.lock ]]; then
    return 0
  else
    return 1
  fi
}

fm() {
  echo "💅 Formatting files with Prettier..."
  # This `is_yarn_project` isn't working well inside in concurrently, just ignoring and using yarn by default for now
  # if is_yarn_project; then
  yarn prettier --write --loglevel=error .
  # else
  # npx prettier --write --loglevel=error .
  # fi
  echo "✅ Done formatting"
}
# "format commit": format the files, and commit the result
fmc() {
  fm

  if git_has_changes; then
    gcim 'cleanup'
  fi
}
lint() {
  echo "🔎 Linting files with ESLint..."
  yarn eslint --max-warnings=0 --fix .
  echo "✅ Done linting"
}
tc() {
  echo "🧐 Type-checking files with TypeScript..."
  yarn tsc $@ --noEmit
  echo "✅ Done type-checking"
}
jest() {
  echo "🧪 Testing files changed on branch..."
  # Maaaaaan, Jest don't know SHIT about how many workers to use
  # https://dev.to/vantanev/make-your-jest-tests-up-to-20-faster-by-changing-a-single-setting-i36
  yarn jest --changedSince=$(git_dev_branch) --coverage=false --maxWorkers=50% $@
  echo "✅ Done testing"
}
jestw() {
  echo "🧪👀 Testing files on watch..."
  yarn jest --watch --coverage=false --maxWorkers=25% $@
  echo "✅ Done testing"
}
jestbw() {
  echo "🧪👀 Testing files changed on branch on watch..."
  yarn jest --changedSince=$(git_dev_branch) --watch --coverage=false --maxWorkers=25% $@
  echo "✅ Done testing"
}
jesta() {
  echo "🧪 Testing all files..."
  yarn jest --coverage=false --maxWorkers=50% $@
  echo "✅ Done testing"
}
# "validate static"
vs() { (
  # Exit and fail the function if any command in it fails. In a function, you have to add the parens to create a "subshell" in order for this to work. Without them, zsh itself crashes
  # https://stackoverflow.com/questions/40429865/how-to-exit-bash-function-if-error
  set -e

  if git_has_changes; then
    echo "Uncommitted changes found; aborting."
    return
  fi

  if is_yarn_project; then
    yarn
  else
    npm i
  fi

  # NOTE: Since concurrently doesn't have access to our functions/aliases above, we have to duplicate their commands here. So those and these should remain in sync
  # Using `npx` right now to reduce noise of saying `yarn run v1.x.x` right now, but could switch to yarn. Or could use bin below (but at that point, have to be in the project root for this to work. Or write some intelligent function that traverses upwards to find the project root, then use the `/node_modules/.bin` from there)
  # local bin="$(pwd)/node_modules/.bin"
  concurrently \
    -n typescript,eslint,prettier -c "#4077ba,#7b7ee3,#efbd52" \
    "npx tsc --noEmit" \
    "npx eslint --max-warnings=0  --fix ." \
    "npx prettier -write --loglevel=error ."

  if git_has_changes; then
    gcim "cleanup"
  fi
); }
# "validate all" (static plus Jest tests)
va() { (
  # Exit and fail the function if any command in it fails. In a function, you have to add the parens to create a "subshell" in order for this to work. Without them, zsh itself crashes
  # https://stackoverflow.com/questions/40429865/how-to-exit-bash-function-if-error
  set -e

  if git_has_changes; then
    echo "Uncommitted changes found; aborting."
    return
  fi

  if is_yarn_project; then
    yarn
  else
    npm i
  fi

  # NOTE: Since concurrently doesn't have access to our functions/aliases above, we have to duplicate their commands here. So those and these should remain in sync
  # Using `npx` right now to reduce noise of saying `yarn run v1.x.x` right now, but could switch to yarn. Or could use bin below (but at that point, have to be in the project root for this to work. Or write some intelligent function that traverses upwards to find the project root, then use the `/node_modules/.bin` from there)
  # local bin="$(pwd)/node_modules/.bin"
  concurrently \
    -n typescript,jest,eslint,prettier -c "#4077ba,#8f455b,#7b7ee3,#efbd52" \
    "npx tsc --noEmit" \
    # Normally do this with `maxWorkers=50%`, but since we're doing this other stuff in parallel too, we have even less resources to work with, so 50% ends up being too much again
    "npx jest --changedSince=$(git_dev_branch) --coverage=false --maxWorkers=25%" \
    "npx eslint --max-warnings=0 --fix ." \
    "npx prettier -write --loglevel=error ."

  if git_has_changes; then
    gcim "cleanup"
  fi
); }

#####################################################################
# Bat and Delta
#####################################################################

# Decide the theme based on macOS dark mode
bat_theme="$(defaults read -globalDomain AppleInterfaceStyle &>/dev/null && echo default || echo GitHub)"
alias bat="bat --theme=$bat_theme"
alias cat="bat"

# Decide the theme based on macOS dark mode
delta_theme="$(defaults read -globalDomain AppleInterfaceStyle &>/dev/null && echo Monokai Extended || echo GitHub)"
alias delta="delta --syntax-theme=$delta_theme"

# To make sure git uses Delta, _with_ the theme we've decided on :)
export GIT_PAGER="delta --syntax-theme=$delta_theme"
# Oh, and since you can't use environment variables in your ~/.gitconfig, we're going to manually set the "system" gitconfig here based on $delta_theme, to make sure intractive git commands (e.g. `git add -p`) are also pretty 💅
git config --system interactive.diffFilter "delta --color-only --syntax-theme=$delta_theme"

#####################################################################
# npm
#####################################################################

alias ni="npm install"
alias nid="npm install -D"
alias nip="npm install -P"

#####################################################################
# yarn
#####################################################################

alias yst="yarn && yarn start"

#####################################################################
# Homebrew
#####################################################################

alias bi="brew install"
alias bb="brew bundle"
alias bupd="brew update"
alias bupg="brew upgrade"
alias bun="brew uninstall"

#####################################################################
# Miscellaneous
#####################################################################

# Open fzf files with vim by default
alias goto="vim -o \`fzf\`"
alias ls="exa"

# List directories
alias lsd="ls -d */"

# Log ip to console
alias myip="curl http://ipecho.net/plain; echo"

# Change ping to stop after 5 pings
alias ping="ping -c 5"

# I do these all the time when I'm mucking around with zsh/my .zshrc
alias z="exec zsh"
alias zo="source ~/.zshrc"

alias alg="alias | grep"

# "bundle id": Given the path to an app, gives the app's bundle id
# Source: https://superuser.com/questions/346369/getting-the-bundle-identifier-of-an-os-x-application-in-a-shell-script
alias bid="mdls -name kMDItemCFBundleIdentifier -r"

alias wh=which

# Clears the screen and runs the succeeding command(s)
c() {
  clear
  eval $@
}
